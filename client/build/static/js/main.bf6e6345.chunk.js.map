{"version":3,"sources":["images/attacker.jpg","images/defender.jpg","components/TopBar.js","components/BattleItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","toolbarContentAlign","display","justifyContent","flexDirection","TopBar","props","classes","style","width","AppBar","position","color","Toolbar","className","Typography","variant","align","battleCount","BattleItem","state","activeBattle","battle","attackerComponent","defenderComponent","battlesListComponent","attackerOutcome","defenderOutcome","this","commonComponent","root2","Chip","icon","PinDropRounded","label","name","clickable","CategoryRounded","battle_type","BlurOffRounded","major_death","NotInterestedRounded","major_capture","LocationSearchingRounded","region","attacker_outcome","CardHeader","title","subheader","subtitle","avatar","Avatar","win","attacker_king","aria-label","lose","defender_king","Card","root","CardMedia","media","image","require","component","CardContent","attacker_commander","attacker_size","attacker_1","attacker_2","attacker_3","attacker_4","defender_commander","defender_size","defender_1","defender_2","defender_3","defender_4","alignItems","responsiveLayout","class","Component","defaultProps","withStyles","background","borderRadius","border","padding","boxShadow","margin","height","paddingTop","backgroundColor","spacing","fontSize","fontWeight","flexWrap","minWidth","zIndex","top","marginBottom","withTheme","URL","App","locations","battles","displayBattleInfo","length","map","index","key","marginTop","axios","get","then","res","data","setState","getBattleCount","response","console","log","catch","alert","value","inputLocation","JSON","stringify","Autocomplete","freeSolo","id","options","autoHighlight","autoComplete","onChange","e","getBattleInfoByLocation","renderInput","params","TextField","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bf6e6345.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/attacker.dbe523ed.jpg\";","module.exports = __webpack_public_path__ + \"static/media/defender.bb8d6d5b.jpg\";","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    toolbarContentAlign: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        '@media (max-width:600px)': {\n            display: 'flex',\n            flexDirection: 'column'\n        }\n    }\n  }));\n\nconst TopBar = (props) => {\n    const classes = useStyles()\n    return(\n        <div style={{ width: '100%' }}>\n        <AppBar position=\"static\" color=\"primary\">\n            <Toolbar className={classes.toolbarContentAlign}>\n                <Typography variant=\"h5\" color=\"inherit\">\n                    Game of Thrones - Battle Ground!\n                </Typography>\n                <Typography variant=\"h5\" color=\"inherit\" align=\"right\">\n                    Total battles: {props.battleCount}\n                </Typography>\n            </Toolbar>\n        </AppBar>\n        </div>\n    )\n}\nexport default TopBar;","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport Chip from '@material-ui/core/Chip';\nimport { PinDropRounded, LocationSearchingRounded, CategoryRounded, BlurOffRounded, NotInterestedRounded  } from '@material-ui/icons';\n\nconst styles = theme => ({\n    root: {\n        background: '#070919',\n        borderRadius: 3,\n        border: 0,\n        padding: '0 20px',\n        boxShadow: '0 2px 4px 1px',\n        color: '#E8E8E8',\n        margin: 20\n    },\n    media: {\n        height: 300,\n        paddingTop: '50'\n    },\n    win: {\n        backgroundColor: '#1EC943',\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n        fontSize: 17,\n    },\n    lose: {\n        backgroundColor: '#B02738',\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n        fontSize: 17,\n    },\n    title: {\n        color: '#ffffff',\n        fontSize: 20,\n        fontWeight: 400\n    },\n    subtitle: {\n        color: '#AC572B',\n        fontSize: 15,\n        fontWeight: 400\n    },\n    root2: {\n        backgroundColor: '#1E1E1E',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n        padding: '10px',\n        minWidth: '20%',\n        borderRadius: 20,\n        position: 'relative', \n        zIndex: 4, \n        top: 110, \n        marginBottom: -250,\n        boxShadow: '0 2px 4px 1px',\n        '@media (max-width:600px)': {\n            position: 'relative',\n            zIndex: 4, \n            top: 0,\n            marginBottom: 0\n         }\n    },\n    responsiveLayout: {\n        display: 'flex',\n        flexDirection: 'row',\n        '@media (max-width:600px)': {\n            display: 'flex',\n            flexDirection: 'column'\n        }\n    }\n});\n\nclass BattleItem extends Component {\n\n    static propTypes = {\n        battle: PropTypes.instanceOf(Object)\n    };\n\n    static defaultProps = {\n        battle: null\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            // The battles on current location\n            activeBattle: this.props.battle\n        };\n    }\n\n    render() {\n        const { classes } = this.props;\n        const {\n            state: {\n                activeBattle\n            }\n        } = this;\n\n        let attackerComponent;\n        let defenderComponent;\n        let battlesListComponent; // combined common, attacker and defender details\n\n        let attackerOutcome;\n        let defenderOutcome;\n\n        //common data for battle\n        let commonComponent = (\n            <div className={classes.root2} >\n                <Chip\n                    icon={<PinDropRounded />}\n                    label={activeBattle.name}\n                    clickable={false}\n                    color=\"primary\"\n                />\n                <Chip\n                    icon={<CategoryRounded />}\n                    label={activeBattle.battle_type}\n                    clickable={false}\n                    color=\"secondary\"\n                />\n                <Chip\n                    icon={<BlurOffRounded />}\n                    label={'Major Death: ' + activeBattle.major_death}\n                    clickable={false}\n                    color=\"secondary\"\n                />\n                <Chip\n                    icon={<NotInterestedRounded />}\n                    label={'Major Capture: ' + activeBattle.major_capture}\n                    clickable={false}\n                    color=\"secondary\"\n                />\n                <Chip\n                    icon={<LocationSearchingRounded />}\n                    label={activeBattle.region}\n                    clickable={false}\n                    color=\"secondary\"\n                />\n            </div>\n        );\n\n        if (activeBattle.attacker_outcome === 'win') {\n            attackerOutcome = (\n                <CardHeader\n                    classes={{\n                        title: classes.title,\n                        subheader: classes.subtitle\n                    }}\n                    avatar={\n                        <Avatar className={classes.win}>\n                            Victory\n                        </Avatar>\n                    }\n                    title={activeBattle.attacker_king}\n                    subheader=\"Attacker King\"\n                />\n            );\n            defenderOutcome = (\n                <CardHeader\n                classes={{\n                        title: classes.title,\n                        subheader: classes.subtitle\n                    }}\n                    avatar={\n                        <Avatar aria-label=\"lost\" className={classes.lose}>\n                            Defeat\n                        </Avatar>\n                    }\n                    title={activeBattle.defender_king}\n                    subheader=\"Defender King\"\n                />\n            );\n        } else {\n            attackerOutcome = (\n                <CardHeader\n                classes={{\n                        title: classes.title,\n                        subheader: classes.subtitle\n                    }}\n                    avatar={\n                        <Avatar aria-label=\"lost\" className={classes.lose}>\n                            Defeat\n                        </Avatar>\n                    }\n                    title={activeBattle.attacker_king}\n                    subheader=\"Attacker King\"\n                />\n            );\n            defenderOutcome = (\n                <CardHeader\n                classes={{\n                        title: classes.title,\n                        subheader: classes.subtitle\n                    }}\n                    avatar={\n                        <Avatar aria-label=\"win\" className={classes.win}>\n                            Victory\n                        </Avatar>\n                    }\n                    title={activeBattle.defender_king}\n                    subheader=\"Defender King\"\n                />\n            );\n        }\n\n        if (activeBattle != null) {\n            //Attacker Component\n            attackerComponent = (\n                <Card className={classes.root}>\n                    {attackerOutcome}\n                    <CardMedia\n                        className={classes.media}\n                        image={require(\"../images/attacker.jpg\")}\n                        component=\"img\"\n                        title=\"Attacker image\"\n                    />\n                    <CardContent>\n                        <Typography variant=\"subtitle1\" color=\"inherit\">\n                            Commander: {activeBattle.attacker_commander}\n                        </Typography>\n                        <Typography variant=\"h4\" color=\"inherit\">\n                            Army Size: {activeBattle.attacker_size}\n                        </Typography>\n                        <Typography variant=\"subtitle2\">\n                            {activeBattle.attacker_1 !== \"\" &&\n                                <p>\n                                    Attacker 1: {activeBattle.attacker_1}\n                                </p>\n                            }\n                            {activeBattle.attacker_2 !== \"\" &&\n                                <p>\n                                    Attacker 2: {activeBattle.attacker_2}\n                                </p>\n                            }\n                            {activeBattle.attacker_3 !== \"\" &&\n                                <p>\n                                    Attacker 3: {activeBattle.attacker_3}\n                                </p>\n                            }\n                            {activeBattle.attacker_4 !== \"\" &&\n                                <p>\n                                    Attacker 4: {activeBattle.attacker_4}\n                                </p>\n                            }\n                        </Typography>\n                    </CardContent>\n                </Card>\n            );\n\n            //Defender Component\n            defenderComponent = (\n                <Card className={classes.root}>\n                    {defenderOutcome}\n                    <CardMedia\n                        className={classes.media}\n                        image={require(\"../images/defender.jpg\")}\n                        title=\"Defender image\"\n                        component=\"img\"\n                    />\n                    <CardContent>\n                        <Typography variant=\"subtitle1\" color=\"inherit\">\n                            Commander: {activeBattle.defender_commander}\n                        </Typography>\n                        <Typography variant=\"h4\" color=\"inherit\">\n                            Army Size: {activeBattle.defender_size}\n                        </Typography>\n                        <Typography variant=\"subtitle2\">\n                            {activeBattle.defender_1 !== \"\" &&\n                                <p>\n                                    Defender 1: {activeBattle.defender_1}\n                                </p>\n                            }\n                            {activeBattle.defender_2 !== \"\" &&\n                                <p>\n                                    Defender 2: {activeBattle.defender_2}\n                                </p>\n                            }\n                            {activeBattle.defender_3 !== \"\" &&\n                                <p>\n                                    Defender 3: {activeBattle.defender_3}\n                                </p>\n                            }\n                            {activeBattle.defender_4 !== \"\" &&\n                                <p>\n                                    Defender 4: {activeBattle.defender_4}\n                                </p>\n                            }\n                        </Typography>\n                    </CardContent>\n                </Card>\n            );\n\n            battlesListComponent = (\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n                    {commonComponent}\n                    <div className={classes.responsiveLayout}>\n                        {attackerComponent}\n                        {defenderComponent}\n                    </div>\n                </div>\n\n            );\n        } else {\n            battlesListComponent = (\n                <div class=\"no-battles\">\n                    No battles Searched, It's peaceful out here!\n                </div>\n            );\n        }\n\n\n        return (\n            <Fragment>\n                {battlesListComponent}\n            </Fragment>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(BattleItem);\n","import React from 'react'\nimport './App.css'\nimport axios from 'axios'\n// import Autocomplete from './components/Autocomplete'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport TextField from '@material-ui/core/TextField'\nimport TopBar from './components/TopBar'\nimport BattleItem from './components/BattleItem'\n\nlet URL = \"http://localhost:8080\"\nif (process.env.NODE_ENV === \"production\") {\n  URL = \"https://game-of-thrones-battle-ground.herokuapp.com\";\n}\nclass App extends React.Component {\n  state = {\n    locations: [],\n    battles: [],\n    battleCount: 0\n  };\n\n  componentWillMount() {\n    axios.get(URL + \"/list\")\n      .then(res => res.data)\n      .then(data => this.setState({ locations: data }));\n      //collect count of battles\n    this.getBattleCount()\n  }\n\n  getBattleCount() {\n    axios.get(URL + \"/list/count\")\n      .then((response) => {\n        const data = response.data;\n        this.setState({ battleCount: data });\n        console.log('Battle Count Data has been received!!' + data);\n      })\n      .catch(() => {\n        alert('Error retrieving Battle Count data!!!');\n      });\n    \n  }\n\n  getBattleInfoByLocation(value) {\n    var inputLocation = value\n    axios.get(URL + \"/list/search?location=\"+inputLocation)\n      .then((response) => {\n        const data = response.data;\n        this.setState({ battles: data });\n        console.log('Battles Data has been received!!' + JSON.stringify(data));\n      })\n      .catch(() => {\n        alert('Error retrieving Battles data!!!');\n      });\n    \n  }\n\n  displayBattleInfo = (battles) => {\n    if (!battles.length) return null;\n\n    return battles.map((battle, index) => (\n      // console.log(\"Battle: \"+battle);\n      <div key={index} style={{ marginTop: 30 }}>\n        <BattleItem \n          battle = {battle}\n        />\n      </div>\n    ));\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TopBar battleCount={this.state.battleCount} />\n        <Autocomplete\n          freeSolo\n          id=\"autocomplete-box-01\"\n          options={this.state.locations}\n          style={{ width: '50%', margin: 15 }}\n          autoHighlight\n          autoComplete\n          onChange={(e, value) => this.getBattleInfoByLocation(value)}\n          renderInput={(params) => <TextField {...params} label=\"Search by Location\" variant=\"outlined\" />}\n        />\n\n        {this.displayBattleInfo(this.state.battles)}\n\n        {/* local implementation of AutoComplete */}\n        {/* <Autocomplete\n            suggestions={this.state.locations}\n          /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}